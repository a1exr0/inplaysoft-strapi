name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_optimize:
        description: 'Force database optimization'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      NODE_ENV: production
      DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
      DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_SSL: ${{ secrets.DATABASE_SSL }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
    steps:
    - name: üîÑ Checkout Code
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: üì• Install Dependencies
      run: npm ci
      
    - name: üèóÔ∏è Build Application
      run: npm run build
      
    - name: üóÑÔ∏è Database Backup (if needed)
      run: |
        if [ "${{ secrets.ENABLE_DB_BACKUP }}" = "true" ]; then
          echo "Creating database backup..."
          if [ -n "${{ secrets.DATABASE_URL }}" ]; then
            pg_dump "${{ secrets.DATABASE_URL }}" > backup_$(date +%Y%m%d_%H%M%S).sql
            echo "Backup created successfully"
          else
            echo "DATABASE_URL not provided, skipping backup"
          fi
        else
          echo "Database backup disabled"
        fi
      continue-on-error: true
      
    - name: üîß Apply Database Optimizations
      run: |
        echo "Applying database optimizations..."
        if [ "${{ github.event.inputs.force_optimize }}" = "true" ]; then
          echo "Force optimization enabled"
          export FORCE_OPTIMIZE=true
        fi
        npm run optimize:db
        
    - name: üß™ Run Performance Tests
      run: |
        echo "Starting Strapi for testing..."
        timeout 300 npm start &
        STRAPI_PID=$!
        
        # Wait for Strapi to start
        echo "Waiting for Strapi to be ready..."
        for i in {1..60}; do
          if curl -f -s http://localhost:1337/api/articles > /dev/null 2>&1; then
            echo "Strapi is ready!"
            break
          fi
          if [ $i -eq 60 ]; then
            echo "Strapi failed to start within 60 seconds"
            kill $STRAPI_PID 2>/dev/null || true
            exit 1
          fi
          sleep 1
        done
        
        # Run performance tests
        npm run test:performance || echo "Performance tests failed but continuing..."
        
        # Stop Strapi
        kill $STRAPI_PID 2>/dev/null || true
        wait $STRAPI_PID 2>/dev/null || true
      continue-on-error: true
      
    - name: üöÄ Deploy to Server
      run: |
        echo "Deploying to production server..."
        echo "Deployment method: ${{ secrets.DEPLOYMENT_METHOD }}"
        
        # Example deployment commands based on deployment method
        case "${{ secrets.DEPLOYMENT_METHOD }}" in
          "docker")
            echo "Building and deploying Docker image..."
            # docker build -f Dockerfile.production -t strapi-app .
            # docker push your-registry/strapi-app:latest
            ;;
          "ssh")
            echo "Deploying via SSH..."
            # Add SSH deployment commands here
            ;;
          "cloud")
            echo "Deploying to cloud provider..."
            # Add cloud deployment commands here
            ;;
          *)
            echo "No deployment method specified or unknown method"
            echo "Please set DEPLOYMENT_METHOD secret"
            ;;
        esac
        
    - name: ‚úÖ Health Check
      run: |
        echo "Running post-deployment health check..."
        if [ -n "${{ secrets.PRODUCTION_URL }}" ]; then
          echo "Checking ${{ secrets.PRODUCTION_URL }}/api/articles"
          sleep 10
          for i in {1..5}; do
            if curl -f -s "${{ secrets.PRODUCTION_URL }}/api/articles" > /dev/null; then
              echo "‚úÖ Health check passed!"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "‚ö†Ô∏è Health check failed after 5 attempts"
            else
              echo "Health check attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
        else
          echo "PRODUCTION_URL not set, skipping health check"
        fi
      continue-on-error: true
      
    - name: üìä Performance Report
      if: always()
      run: |
        echo "Generating performance report..."
        echo "Database optimization status: ${{ job.status }}"
        echo "Performance tests completed"
        
        # You can add additional performance monitoring here:
        # - Lighthouse CI for frontend performance
        # - Database query analysis
        # - Memory usage reports
        # - Response time benchmarks
        
    - name: üìß Notify Team
      if: failure()
      run: |
        echo "Deployment failed - notifications would be sent here"
        echo "Failed job: ${{ github.job }}"
        echo "Failed step: ${{ job.status }}"
        
        # Add notification integrations here:
        # - Slack webhook
        # - Discord webhook  
        # - Email notifications
        # - Microsoft Teams
        
        # Example Slack notification (uncomment and configure):
        # curl -X POST -H 'Content-type: application/json' \
        #   --data "{\"text\":\"üö® Deployment failed for ${{ github.repository }} on branch ${{ github.ref_name }}\"}" \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: üéâ Success Notification
      if: success()
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        
        # Add success notifications here if needed 